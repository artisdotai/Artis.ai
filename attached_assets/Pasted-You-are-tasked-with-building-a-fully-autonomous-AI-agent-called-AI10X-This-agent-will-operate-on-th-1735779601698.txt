You are tasked with building a fully autonomous AI agent called AI10X. This agent will operate on the Solana blockchain and focus on identifying and trading profitable tokens based on launch data from Pump.fun and Raydium. The system will leverage insights from the @spydefi_bot to enhance decision-making.

---

### Core Functionality:
1. **Monitor Launches**:
   - Continuously scan Pump.fun and Raydium for new token launches.
   - Use APIs or web scraping to fetch token details, including launch timing, liquidity, and initial volume.

2. **Integrate @spydefi_bot**:
   - Collect data from @spydefi_bot to identify calls made by Key Opinion Leaders (KOLs).
   - Analyze KOL performance history based on:
     - Volume generated by their past calls.
     - Price movement and ROI after their calls.
   - Maintain a scoring system for KOLs to prioritize high-performing influencers.

3. **Decision-Making and Trading**:
   - When a high-performing KOL calls a Pump.fun or Raydium token:
     - Evaluate the tokenâ€™s immediate trading conditions (e.g., liquidity, volume, volatility).
     - Execute a buy order if the KOL's performance history and current conditions meet predefined thresholds.
   - Use a stop-loss and take-profit mechanism to manage risk.

4. **Self-Learning**:
   - Continuously update the scoring system for KOLs based on real-time results.
   - Refine trading strategies by analyzing past trade outcomes.

5. **Profit Management**:
   - Reinvest profits into:
     - Token buybacks to increase $AI10X scarcity.
     - Adding liquidity to $AI10X pools.
     - GPU upgrades to enhance AI performance.

---

### Technical Details:
1. **Language**: Python.
2. **Integration**:
   - Use APIs or scrape @spydefi_bot for KOL data and token calls.
   - Integrate Solana SDK (`solana-py`) for wallet and trade management.
   - Connect to Pump.fun and Raydium to monitor launches and fetch trading data.
3. **Modules**:
   - `spydefi_integration.py`: Fetch and analyze KOL data from @spydefi_bot.
   - `launch_monitor.py`: Monitor Pump.fun and Raydium launches.
   - `trade_executor.py`: Execute trades and manage risks.
   - `profit_manager.py`: Automate profit allocation.
   - `kol_scoring.py`: Maintain and update a scoring system for KOL performance.
4. **Logic Enhancements**:
   - Prioritize tokens with calls from top-scoring KOLs.
   - Implement risk management features such as trade limits and stop-losses.
5. **Dashboard**:
   - Provide real-time insights into:
     - Current trades and ROI.
     - KOL scoring and trade performance history.
     - Wallet balance and profit distribution.

---

### Expected Output:
- A fully autonomous AI system that:
  - Monitors Pump.fun and Raydium launches.
  - Analyzes KOL performance from @spydefi_bot to identify high-potential tokens.
  - Executes trades based on performance history and launch conditions.
  - Allocates profits to $AI10X buybacks, liquidity, and GPU upgrades.
- The system must operate independently and continuously refine its strategies.

---

### Additional Instructions:
- Build the system to operate autonomously after initialization.
- If any additional tools or APIs are required, log the requirements and request them.
- Ensure all actions are logged for transparency and review.

